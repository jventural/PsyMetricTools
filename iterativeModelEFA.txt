iterativeModelEFA <- function(data, initialModel, MAX_ITERATIONS = 10) {

  identifyItemsToExclude <- function(result_df) {
    # Asumiendo que result_df es un dataframe donde:
    # - Las filas representan items.
    # - Las columnas representan las cargas en cada factor (f1, f2, f3, etc.).

    # Identificar items con cargas cruzadas significativas.
    crossLoadedItems <- result_df %>%
      rowwise() %>%
      mutate(crossLoad = sum(c_across(starts_with("f")) > 0.3) > 1) %>%
      filter(crossLoad) %>%
      pull(Items)

    return(crossLoadedItems)
  }


  excludedItems <- list()
  iteration <- 1
  allResultsDf <- list()  # Almacena los result_df de cada modelo.
  finalModelInfo <- NULL  # Almacena la información del modelo final deseado.

  name_items <- initialModel$name_items

  while (iteration <= MAX_ITERATIONS) {
    initialModel$exclude_items <- unique(c(initialModel$exclude_items, excludedItems))

    modelos <- generate_modelos(n_factors = initialModel$n_factors,
                                n_items = initialModel$n_items,
                                name_items = initialModel$name_items,
                                exclude_items = initialModel$exclude_items)

    Specifications <- specification_models(modelos, data = data, estimator = "WLSMV")
    Bondades <- extract_fit_measures(Specifications)

    foundItemsToExclude <- FALSE

    for (i in seq_along(Specifications)) {
      result_df <- Standardized_solutions(Specifications[[i]], name_items = name_items, apply_threshold = TRUE)
      key <- paste("Modelo", i, "Iteración", iteration)
      allResultsDf[[key]] <- result_df

      itemsToExclude <- identifyItemsToExclude(result_df)
      if (length(itemsToExclude) > 0) {
        foundItemsToExclude <- TRUE
        excludedItems <- unique(c(excludedItems, itemsToExclude))
        break
      } else if (!foundItemsToExclude && i == length(Specifications)) {
        # Si llegamos al último modelo sin encontrar items para excluir, marcamos este como el modelo final deseado.
        finalModelInfo <- key
      }
    }

    if (!foundItemsToExclude) {
      # Si no se encontraron items para excluir en ninguna de las especificaciones, detener el bucle.
      break
    }

    iteration = iteration + 1
  }

  if (!is.null(finalModelInfo)) {
    message(paste("Análisis completado:", finalModelInfo, "tiene la estructura más simple."))
  } else if (iteration > MAX_ITERATIONS) {
    message("Se alcanzó el número máximo de iteraciones sin encontrar una estructura factorial completamente aceptable.")
  }

  return(list(Models = Specifications, Bondades = Bondades, ExcludedItems = excludedItems, FinalIteration = iteration, AllResultsDf = allResultsDf, FinalModelInfo = finalModelInfo))
}